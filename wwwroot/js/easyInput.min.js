/*! EasyInput 1.5.12 */

var ei = {
	version: '1.5.12',

	_track: {
		ai: 0,
		bindings: false,
		throttle: null,
		focus: null,
		selectSearch: null,
		selectSearchTimer: null,
		outdated: window.attachEvent && !window.addEventListener,
		isTouchDevice: 'ontouchstart' in window || navigator.msMaxTouchPoints,
		executedTouchEvent: null,
		mouseHold: {
			timeout: null,
			delay: 500,
		},
		modules: [

		],
		inputHandlers: {

		},
		fields: [],
	},

	_cfg: {
		debug: false,
		mobileWidth: 960, // If screen width is less than this, dropdowns will show native UI when clicking the control
		outdatedNative: false, // Fallback to native inputs on outdated browsers (ones that don't support 'window.addEventListener'; namely <= IE8, mainly for aesthetics)
		selectLimitWidth: false, // Should select/dropdown option lists be limited to a max width of the control's width?,
		limitLabelScope: false, // should we only look for labels that are under the same parent when linking an EI control to a label?
		autoCompleteThrottle: 150, // delay before querying the server for auto complete
	},

	config: function (o) { // Set config
		if (typeof o === 'string')
			return ei._cfg[o];

		$.each(o, function (k, v) {
			ei._cfg[k] = v;
		});

		return ei._cfg;
	},

	_getType: function (e) {
		return $(e).is('input') ? ($(e).hasClass('ei-date-select') ? 'date' : $(e).hasClass('ei-auto-complete') ? 'auto-complete' : ($(e).hasClass('ei-number') ? 'number' : $(e).attr('type').toLowerCase())) : ($(e).hasClass('ei-combo') ? 'combo' : $(e).prop('tagName').toLowerCase());
	},

	_zeroPad: function (n, width, z) { // Pad string to specified length
		z = z || '0';
		n = n + '';
		return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
	},

	_bindings: function () { // Only bind events if EI is initiated on an element
		ei._track.bindings = true;
		$('body').on('click tap', 'label:not([for])', function () {
			$(this).next('input, select, textarea').trigger('click').end().prev('input, select, textarea').trigger('click');
		}).on('mouseenter', '.ei-label', function () {
			$('#ei-input-' + $(this).attr('data-ei-bound-to')).addClass('ei-hover');
		}).on('mouseleave', '.ei-label', function () {
			$('#ei-input-' + $(this).attr('data-ei-bound-to')).removeClass('ei-hover');
		}).on('click tap', '.ei-input.ei-file .ei-count', function (e) {
			e.preventDefault();
			$('.ei-widget').hide();
			$(this).parents('.ei-container').find('.ei-file-list').toggle().eiPositionWidget();
		}).on('click tap', '.ei-input.ei-select .ei-name', function () {
			var o = $(this).parents('.ei-container').find('.ei-input'),
				h = o.hasClass('ei-focus');
			if (o.hasClass('ei-disabled'))
				return false;
			$('.ei-widget').hide();
			$('.ei-input').removeClass('ei-focus');
			ei._track.focus = null;
			if (!h) {
				var c = o.parents('.ei-container');
				if (c.find('.ei-search-input').length)
					c.find('.ei-search-input').val('').trigger('keyup');

				if (typeof o.attr('data-ei-update-focus') !== 'undefined') {
					var options = "";
					c.find('[data-ei-bound-to]').trigger('click').find('option, optgroup').each(function () {
						if ($(this).is('optgroup'))
							options += "<div class='ei-option-group" + ($(this).parent('optgroup').length ? ' ei-nested' : '') + "'>" + $(this).attr('label') + "</div>";
						else
							options += "<div class='ei-option" + ($(this).prop('disabled') ? " ei-disabled" : "") + ($(this).parent('optgroup').length ? ' ei-nested' : '') + "' data-value='" + $(this).attr('value') + "' tabindex='0'>" + $(this).text() + "</div>";
					});
					c.find('.ei-options').html(options);
				}

				o.addClass('ei-focus').end().find('.ei-options').css(ei._cfg.selectLimitWidth ? 'width' : 'minWidth', Math.floor($(this).parent().outerWidth()) + 'px').css({ maxWidth: ($(window).innerWidth() - o.offset().left) - 15, display: 'block' }).eiPositionWidget();
				ei._track.focus = o.parents('.ei-container');
			}
			return true;
		}).on('click tap', '.ei-option', function () {
			if ($(this).hasClass('ei-disabled'))
				return;
			var p = $(this).parents('.ei-container'),
				isCombo = p.hasClass('ei-combo'),
				isAutoComplete = p.hasClass('ei-auto-complete');

			if (isAutoComplete) {
				p.find('.ei-auto-complete-print').val($(this).text());
				p.find('.ei-hidden').find('input').val($(this).attr('data-value')).trigger('change');
				$('.ei-widget').hide();
			}
			else if (!isCombo) {
				p.find('select').val($(this).attr('data-value')).trigger('change');
				p.find('.ei-select').find('.ei-name').trigger('click');
				$('.ei-widget').hide();
			}
			else
				p.find('.ei-hidden').find("input#" + $(this).attr('data-ei-bound-to')).trigger('click');
		}).on('change', 'select[data-ei-bound-to]', function () {
			$(this).parents('.ei-container').find('.ei-select').find('.ei-name').html($(this).find('option:selected').text());
		}).on('keyup', '.ei-search-input', function () {
			var value = $(this).val().toLowerCase();
			$(this).parents('.ei-options').find('.ei-option').removeClass('ei-searchable-hidden ei-disabled').filter(function () {
				return $(this).text().toLowerCase().indexOf(value) === -1;
			}).addClass('ei-searchable-hidden ei-disabled');
		}).on('click tap', '.ei-input.ei-checkbox, .ei-input.ei-radio', function () {
			$("input[data-ei-bound-to='" + $(this).attr('data-ei-id') + "']").trigger('click');
		}).on('mouseenter', '.ei-option', function () {
			$(this).trigger('focus');
		}).on('mouseenter', '.ei-option-group', function () {
			$(this).prev().trigger('blur') && $(this).next().trigger('blur');
		}).on('keydown', function (e) {
			switch (e.keyCode) {
				case 9: // tab
					if (!ei._track.focus || !ei._track.focus.hasClass('ei-auto-complete'))
						return;

					e.preventDefault();

					ei._track.focus.find('.ei-options').find('.ei-option:not(.ei-disabled):visible').eq(0).trigger('click');
					document.activeElement.blur();
					break;
				case 13:
					{ // Return/enter
						var a = $(document.activeElement);
						if (a.hasClass('ei-select'))
							a.find('.ei-name').trigger('click');
						else if (a.hasClass('ei-file'))
							a.parents('.ei-container').find('input').trigger('click');
						else if (a.hasClass('ei-option') || a.hasClass('ei-input'))
							a.trigger('click');
					};
					break;
				case 27:
					{ // Escape
						$('.ei-widget').hide();
						$('.ei-input').removeClass('ei-focus');
						ei._track.focus = null;
						return;
					}
				case 38:
				case 40:
					{ // Up/down
						if (!$(document.activeElement).parents('.ei-container').length || !$(document.activeElement).parents('.ei-container').find('.ei-options').length)
							return;

						e.preventDefault();

						if (e.keyCode === 38)
							$(document.activeElement).prevAll('.ei-option:not(.ei-disabled):visible').eq(0).trigger('focus');
						else {
							if (!$(document.activeElement).hasClass('ei-option'))
								$('.ei-options:visible').find('.ei-option:not(.ei-disabled):visible').eq(0).trigger('focus');
							else
								$(document.activeElement).nextAll('.ei-option:not(.ei-disabled):visible').eq(0).trigger('focus');
						}
					};
					break;
				default:
					{
						if (ei._track.focus == null || (!ei._track.focus.hasClass('ei-select') && !ei._track.focus.hasClass('ei-combo') && $(e.target).hasClass('ei-search-input')) || ei._track.focus.hasClass('ei-auto-complete'))
							return;

						// if it's a searchable dropdown, focus the input field
						var input = ei._track.focus.find('.ei-options').find('.ei-search-input');
						if (input.length) {
							input.trigger('focus');
							return;
						}
						// doesn't have a search field, but we can still jump to relative results...
						ei._track.selectSearch = ((ei._track.selectSearch || '') + String.fromCharCode(e.keyCode));
						clearTimeout(ei._track.selectSearchTimer);
						ei._track.selectSearchTimer = setTimeout(function () {
							ei._track.selectSearch = null;
						}, 1000);
						ei._track.focus.find('.ei-options').find('.ei-option').filter(function () {
							return $(this).html().toLowerCase().indexOf(ei._track.selectSearch.toLowerCase()) === 0;
						}).eq(0).trigger('focus');
						ei._cfg.debug && console.log("EasyInput: Searching dropdown for '" + ei._track.selectSearch + "'");
					};
					break;
			};
		}).on('change', 'input[type=file].ei', function () {
			var s = "";
			for (var i = 0; i < this.files.length; i++)
				s += "<div class='ei-file-name'>" + this.files[i].name + "</div>";
			if (this.files.length === 1)
				$(this).siblings('.ei-name').html(this.files[0].name);
			else if (this.files.length > 1)
				$(this).siblings('.ei-name').html("<div class='ei-count'><div class='ei-inner'>" + this.files.length + " files selected</div></div>").parents('.ei-container').find('.ei-file-list').remove().end().append("<div class='ei-file-list ei-widget'>" + s + "</div>");
			else
				$(this).siblings('.ei-name').html($(this).attr('placeholder') || "Select a file...");
		}).on('mousedown touchstart', '.ei-number .ei-button', function (e) {
			if (e.type === 'mousedown' && ei._track.executedTouchEvent >= Date.now() - 1000)
				return;
			var t = $(this);
			ei._track.mouseHold.timeout = 0;
			t.trigger('fire');
			ei._track.mouseHold.delay = 350;
			ei._track.mouseHold.timeout = setTimeout(function () {
				t.trigger('fire');
			}, ei._track.mouseHold.delay);
			if (e.type === 'touchstart')
				ei._track.executedTouchEvent = Date.now();
		}).on('mouseup mouseleave touchend', '.ei-number .ei-button', function () {
			clearTimeout(ei._track.mouseHold.timeout);
			ei._track.mouseHold.timeout = 0;
		}).on('fire', '.ei-number .ei-button', function () {
			var t = $(this),
				direction = !$(this).hasClass('ei-minus'),
				input = $(this).parent().find('.ei-input'),
				oldVal = (Number(input.val()) || 0),
				adjustment = Number(input.attr('data-ei-adjustment') || 1),
				newVal = oldVal + (direction ? adjustment : -adjustment),
				min = Number(input.attr('data-ei-minimum') || "a"),
				max = Number(input.attr('data-ei-maximum') || "a");

			if (!isNaN(max) && newVal > max)
				newVal = max;
			else if (!isNaN(min) && newVal < min)
				newVal = min;

			input.val(newVal).trigger('change');

			if (ei._track.mouseHold.timeout) {
				clearTimeout(ei._track.mouseHold.timeout);
				ei._track.mouseHold.timeout = setTimeout(function () {
					ei._track.mouseHold.timeout && t.trigger('fire');
				}, ei._track.mouseHold.delay * .75 < 40 ? 40 : ei._track.mouseHold.delay *= .75);
			}
		}).on('change', 'input.ei-number', function () {
			var input = $(this),
				id = input.attr('data-ei-id'),
				value = (Number(input.val()) || 0),
				min = Number(input.attr('data-ei-minimum') || "a"),
				max = Number(input.attr('data-ei-maximum') || "a");

			if (!id)
				return;

			if (isNaN(value))
				input.val(0);
			// check the max here, but min should be left for the blur event - otherwise it goofs whilst typing numbers manually
			else if (!isNaN(max) && value > max)
				input.val(max);
			
			if (ei._track.fields[id].decimalPlaces > 0)
				input.val(Number(input.val()).toFixed(ei._track.fields[id].decimalPlaces));

			var finalValue = Number(input.val());
			input.closest('.ei-container').find('.ei-minus').toggleClass('ei-disabled', (!isNaN(min) && finalValue <= min)).end().find('.ei-plus').toggleClass('ei-disabled', (!isNaN(max) && finalValue >= max));

			input.parent().find('.ei-hidden').find('input').val(input.val());
		})
			// validate min/max on input blur
			.on('blur', 'input.ei-number', function () {
				var input = $(this),
					value = (Number(input.val()) || 0),
					min = Number(input.attr('data-ei-minimum') || "a"),
					max = Number(input.attr('data-ei-maximum') || "a");

				if (isNaN(value))
					input.val(0);
				else if (!isNaN(max) && value > max)
					input.val(max);
				else if (!isNaN(min) && value < min)
					input.val(min);

				var finalValue = Number(input.val());
				input.closest('.ei-container').find('.ei-minus').toggleClass('ei-disabled', (!isNaN(min) && finalValue <= min)).end().find('.ei-plus').toggleClass('ei-disabled', (!isNaN(max) && finalValue >= max));
			})
			.on('focus', 'input.ei-auto-complete-print', function () {
				$('.ei-widget').hide();
				ei._track.focus = $(this).parents('.ei-container');
				ei._track.focus.find('.ei-options').show().eiPositionWidget();
			})
			.on('keyup', 'input.ei-auto-complete-print', function (e) {
				var id = $(this).attr('data-ei-id'),
					trk = ei._track.fields[id],
					t = this;

				if (trk.autoCompleteUrl && (trk.autoCompleteRequestLimit === -1 || trk.autoCompleteRequestCount < trk.autoCompleteRequestLimit)) {
					clearTimeout(trk.autoCompleteRequest);
					trk.autoCompleteRequest = setTimeout(function () {
						$.ajax({
							url: trk.autoCompleteUrl,
							type: 'GET',
							data: 'q=' + encodeURIComponent($(t).val()),
							dataType: 'JSON',
							success: function (r) {
								ei.setAutoCompleteOptions(id, r);
								ei.filterAutoCompleteOptions(id, $(t).val());
								trk.autoCompleteRequestCount++;
							},
							error: function () {
								$('#ei-container-' + id).find('.ei-options').find('.ei-sentinel').html("<span style='color:#F00;'>Error, please try again.</span>");
							}
						});
					}, ei._cfg.autoCompleteThrottle);
				}
				else
					ei.filterAutoCompleteOptions(id, $(t).val());

				$('#ei-container-' + id).find('.ei-hidden').find('input').val($(this).val()).trigger('change');
			})
			.on('change', 'input.ei-auto-complete-print', function () {
				var id = $(this).attr('data-ei-id');
				$('#ei-container-' + id).find('.ei-hidden').find('input').val($(this).val()).trigger('change');
			});

		for (var i = 0; i < ei._track.modules.length; i++)
			if (typeof ei[ei._track.modules[i]] !== 'undefined') {
				if (typeof ei[ei._track.modules[i]]._bindings !== 'undefined') {
					ei[ei._track.modules[i]]._bindings();
					ei._cfg.debug && console.log("EasyInput: Binding external handler [handler=" + ei._track.modules[i] + "]");
				} else
					ei._cfg.debug && console.log("EasyInput: No bindings found for external handler [handler=" + ei._track.modules[i] + "]");
			}

		$(document).on('click tap', function (e) {
			if (!$(e.target).parents('.ei-container').length && !$(e.target).hasClass('ei-time')) {
				$('.ei-widget').hide();
				$('.ei-input').removeClass('ei-focus');
				ei._track.focus = null;
			}
		});

		$(window).on('resize', function () {
			clearTimeout(ei._track.throttle);
			ei._track.throttle = setTimeout(function () {
				if (ei._track.isTouchDevice && $(window).innerWidth() < ei._cfg.mobileWidth)
					$('.ei-container').addClass('ei-mobile');
				else
					$('.ei-container').removeClass('ei-mobile');
				$('.ei-widget').hide();
				ei._track.focus = null;
			}, 40);
		}).on('scroll', function () {
			clearTimeout(ei._track.throttle);
			ei._track.throttle = setTimeout(function () {
				$('.ei-widget').eiPositionWidget();
			}, 40);
		});

		ei._cfg.debug && console.log("EasyInput: Bound");
	},

	registerHandler: function (type, module) {
		if (typeof ei._track.inputHandlers[type] !== 'undefined')
			console.log("EasyInput: Multiple handlers registered for type '" + type + "'; going with the latest (" + module + ")");
		ei._track.inputHandlers[type] = module;
		if (ei._track.modules.indexOf(module) === -1)
			ei._track.modules.push(module);
	},

	positionWidget: function (widget) { // Moves widgets (calendar, dropdown menu etc.) above/below the input when needed.
		var o = widget.offset(),
			h = widget.outerHeight(),
			sT = $(window).scrollTop(),
			p = widget.parents('.ei-container'),
			f = widget.hasClass('ei-flip'),
			iH = p.find('.ei-input').outerHeight();

		if ((o.top - sT) + h > $(window).innerHeight() - 10)
			widget.css({ top: '', bottom: iH + 'px' }).addClass('ei-flip');
		else if (f && ((o.top + (h * 2)) - sT) + iH < $(window).innerHeight() - iH)
			widget.css({ top: '', bottom: '' }).removeClass('ei-flip');

		if (widget.hasClass('ei-options')) {
			var oH = widget.find('.ei-option').eq(0).outerHeight(),
				above = (Math.floor(((p.offset().top - sT) - 10) / oH) * oH),
				below = (Math.floor(($(window).innerHeight() - (((p.offset().top + iH) + 10) - sT)) / oH) * oH);
			if (below >= above * .75 || h <= below) // Favour having the widget below the control
				widget.css({ top: '', bottom: '', maxHeight: below + 'px' }).removeClass('ei-flip');
			else
				widget.css({ top: '', bottom: iH + 'px', maxHeight: above + 'px' }).addClass('ei-flip');
		}
		else if (widget.hasClass('ei-file-list')) {
			var count = p.find('.ei-count'),
				offset = count.position();
			widget.css({ left: offset.left + 'px' });
		}
	},

	init: function (input, params) {
		++ei._track.ai;

		var field = input;
		if (!(input instanceof jQuery))
			input = $(input);

		if (!params)
			params = {};

		var p = {
			id: typeof (params.id) !== 'undefined' ? params.id : ei._track.ai,
			classNames: params.classNames || input.attr('data-ei-class') || null,
			searchable: params.searchable,
			searchableName: params.searchableName,
			placeholder: params.placeholder
		};

		ei._track.fields[ei._track.ai] = p;

		var label = ei._cfg.limitLabelScope ? input.parent().find("label[for='" + field.id + "']:not([data-ei-ignore])") : $("label[for='" + field.id + "']:not([data-ei-ignore])");
		label && label.addClass('ei-label').attr({ 'data-ei-bound-to': ei._track.ai });

		input.wrap("<div class='ei-container" + (ei._track.isTouchDevice && $(window).innerWidth() < ei._cfg.mobileWidth ? ' ei-mobile' : '') + (p.classNames ? ' ' + p.classNames : '') + "' id='ei-container-" + ei._track.ai + "' data-ei-id='" + ei._track.ai + "'><div class='ei-hidden'></div></div>");

		var container = input.parents('.ei-container'),
			type = ei._getType(field);

		container.addClass('ei-' + type);
		input.attr({ 'data-ei-bound-to': ei._track.ai });

		switch (type) {
			// checkbox
			case 'checkbox': {
				container.prepend("<div class='ei-input ei-checkbox' id='ei-input-" + ei._track.ai + "' tabindex='0' data-ei-id='" + ei._track.ai + "' data-checked='" + input.prop('checked') + "' data-ei-bound-to='" + (field.id || '') + "'" + (input.attr('style') ? " style='" + input.attr('style') + "'" : "") + "></div>");
				if (label)
					container.append(label.clone()) && label.remove();
				input.on('change', function () {
					var i = $(this).attr('data-ei-bound-to');
					$('#ei-input-' + i).attr({ 'data-checked': $(this).prop('checked') });
					if (ei._track.outdated)
						$('#ei-input-' + i).toggle().toggle();
				});
			} break;
			// radio
			case 'radio': {
				container.prepend("<div class='ei-input ei-radio' id='ei-input-" + ei._track.ai + "' tabindex='0' data-ei-id='" + ei._track.ai + "' data-checked='" + input.prop('checked') + "' data-ei-bound-to='" + (field.id || '') + "' data-ei-group='" + field.name + "'" + (input.attr('style') ? " style='" + input.attr('style') + "'" : "") + "></div>");
				if (label)
					container.append(label.clone()) && label.remove();
				input.on('change', function () {
					var i = $(this).attr('data-ei-bound-to');
					$(".ei-radio[data-ei-group='" + $(this).prop('name') + "']").attr({ 'data-checked': false });
					$('#ei-input-' + i).attr({ 'data-checked': $(this).prop('checked') });
					if (ei._track.outdated)
						$('#ei-input-' + i).toggle().toggle();
				});
			} break;
			// file
			case 'file': {
				container.prepend("<div class='ei-input ei-file ei-block" + (input.hasClass('ei-compact') ? ' ei-compact' : '') + "' id='ei-input-" + ei._track.ai + "' tabindex='0' data-ei-id='" + ei._track.ai + "' data-ei-bound-to='" + (field.id || '') + "'" + (input.attr('style') ? " style='" + input.attr('style') + "'" : "") + "><div class='ei-name'>" + (input.attr('placeholder') || 'Select a file...') + "</div></div>").find('.ei-hidden').remove();
				container.find('.ei-input').append(input.clone());
			} break;
			// select
			case 'select':
				{
					var o = "";

					container.prepend("<div class='ei-input ei-select ei-block" + (input.attr('disabled') ? ' ei-disabled' : '') + "' id='ei-input-" + ei._track.ai + "' tabindex='0' data-ei-id='" + ei._track.ai + "' data-ei-bound-to='" + (field.id || '') + "'" + (typeof input.attr('data-ei-update-focus') !== 'undefined' ? " data-ei-update-focus" : "") + (input.attr('style') ? " style='" + input.attr('style') + "'" : "") + "><div class='ei-name'>" + input.find('option:selected').text() + "</div></div>");

					var search = (p.searchable || typeof input.attr('data-ei-searchable') !== 'undefined') ? "<input type='text' class='ei-search-input' placeholder='" + (p.searchableName || input.attr('data-ei-searchable-placeholder') || "Search...") + "' tabindex='0' />" : "";

					input.find('option, optgroup').each(function () {
						if ($(this).is('optgroup'))
							o += "<div class='ei-option-group" + ($(this).parent('optgroup').length ? ' ei-nested' : '') + "'>" + $(this).attr('label') + "</div>";
						else
							o += "<div class='ei-option" + ($(this).prop('disabled') ? " ei-disabled" : "") + ($(this).parent('optgroup').length ? ' ei-nested' : '') + "' data-value='" + $(this).attr('value') + "' tabindex='0'>" + $(this).text() + "</div>";
					});

					container.append("<div class='ei-options ei-widget'>" + search + o + "</div>").find('.ei-hidden').remove();
					container.find('.ei-input').append(input.clone());
				} break;
			// combo
			case 'combo':
				{
					var o = "";

					container.prepend("<div class='ei-input ei-select ei-combo ei-block' id='ei-input-" + ei._track.ai + "' tabindex='0' data-ei-id='" + ei._track.ai + "' data-ei-bound-to='" + (field.id || '') + "'" + (input.attr('style') ? " style='" + input.attr('style') + "'" : "") + "><div class='ei-name'>" + (p.placeholder || input.attr('data-ei-placeholder')) + "</div></div>");

					var search = (p.searchable || typeof input.attr('data-ei-searchable') !== 'undefined') ? "<input type='text' class='ei-search-input' placeholder='" + (p.searchableName || input.attr('data-ei-searchable-placeholder') || "Search...") + "' tabindex='0' />" : "";

					input.on('change ei-change', 'input[type=checkbox]', function () {
						var isChecked = $(this).prop('checked'),
							label = container.find('.ei-hidden').find("label[for='" + this.id + "']"),
							name = container.find('.ei-name');

						container.find('.ei-options').find(".ei-option[data-ei-bound-to='" + this.id + "']").attr({ 'data-ei-checked': isChecked });
						name.find('.ei-count').remove();

						if (isChecked) {
							name.find('.ei-combo-tag').length === 0 && container.find('.ei-name').html("<div class='ei-inner'></div>");
							name.find('.ei-inner').prepend("<div class='ei-combo-tag' data-ei-bound-to='" + this.id + "'>" + label.text() + "</div>");
						} else {
							name.find(".ei-combo-tag[data-ei-bound-to='" + this.id + "']").remove();
							name.find('.ei-combo-tag').length === 0 && name.html(p.placeholder || input.attr('data-ei-placeholder'));
						}

						var cutOff = 0,
							availWidth = name.innerWidth() - 50;
						name.find('.ei-inner').find('.ei-combo-tag[data-ei-bound-to]').show().each(function () {
							if ($(this).outerWidth() + $(this).position().left > availWidth)
								++cutOff && $(this).hide();
						});
						cutOff && name.find('.ei-inner').append("<div class='ei-combo-tag ei-count'>+" + cutOff + "</div>");

					}).find('input[type=checkbox]').each(function () {
						o += "<div class='ei-option ei-combo-option" + ($(this).prop('disabled') ? " ei-disabled" : "") + "' tabindex='0' data-ei-checked='" + $(this).prop('checked') + "' data-ei-bound-to='" + this.id + "'>" + input.find("label[for='" + this.id + "']").text() + "</div>";
						$(this).prop('checked') && $(this).trigger('ei-change');
					});

					container.append("<div class='ei-options ei-widget'>" + search + o + "</div>");
				} break;
			// number
			case 'number':
				{
					ei._track.fields[ei._track.ai].decimalPlaces = Number((input.attr('data-ei-adjustment') || '1').indexOf('.') !== -1 ? input.attr('data-ei-adjustment').split('.')[1].length : 0);

					var min = (input.attr('data-ei-minimum') || 'a'),
						max = (input.attr('data-ei-maximum') || 'a');

					container.prepend("<div class='ei-button ei-minus" + (!isNaN(min) && min >= Number(field.value) ? ' ei-disabled' : '') + "'></div><input type='text' class='ei-input ei-number' id='ei-input-" + ei._track.ai + "' tabindex='0' data-ei-id='" + ei._track.ai + "' data-ei-bound-to='" + (field.id || '') + "' data-ei-minimum='" + (input.attr('data-ei-minimum') || '') + "' data-ei-maximum='" + (input.attr('data-ei-maximum') || '') + "' data-ei-adjustment='" + (input.attr('data-ei-adjustment') || '1') + "' " + (input.attr('style') ? " style='" + input.attr('style') + "'" : "") + " value='" + field.value + "' /><div class='ei-button ei-plus" + (!isNaN(max) && max <= Number(field.value) ? ' ei-disabled' : '') + "'></div>");
				} break;
			case 'auto-complete':
				{
					ei._track.fields[ei._track.ai].autoCompleteUrl = params.autoCompleteUrl || input.attr('data-ei-auto-complete-url');
					ei._track.fields[ei._track.ai].autoCompleteRequestCount = 0;
					ei._track.fields[ei._track.ai].autoCompleteRequestLimit = params.autoCompleteRequestLimit || input.attr('data-ei-auto-complete-request-limit') || -1;

					var classes = field.className.split(' ').filter(function (c) {
						return c.lastIndexOf('ei', 0) !== 0;
					}).join(' ').trim();

					container.prepend("<input type='text' class='ei-auto-complete-print" + (classes ? ' ' + classes : '') + "' tabindex='0' data-ei-id='" + ei._track.ai + "' value='" + field.value + "' placeholder='" + (p.placeholder || field.placeholder) + "' " + (input.attr('style') ? " style='" + input.attr('style') + "'" : "") + " /><span class='ei-search-icon' aria-hidden='true'></span>");
					container.append("<div class='ei-options ei-widget'><div class='ei-option ei-disabled ei-sentinel'>Start typing to see suggestions...</div></div>");
				}
				break;
		}

		if (typeof ei._track.inputHandlers[type] !== 'undefined') {
			ei._cfg.debug && console.log("EasyInput: Init passed to external handler [type=" + type + ", handler=" + ei._track.inputHandlers[type] + "]", input);
			ei[ei._track.inputHandlers[type]]._init(input, container, params, type);
		}

		if (field.style.width)
			container.css({ width: field.style.width }).find('.ei-input').css({ width: '' });

		container.find('.ei-hidden input, select').removeAttr('style');

		ei._cfg.debug && console.log("EasyInput: Init [type=" + type + "]", input);
	},

	setAutoCompleteOptions: function (input, options) {
		var id = ~~(~~input ? input : (input instanceof jQuery ? input.attr('data-ei-bound-to') : $(input).attr('data-ei-bound-to')));
		if (!id)
			throw "Input param must be an EI id, jQuery object or a selector.";

		ei._track.fields[id].options = options;

		var opt = '';
		if (Array.isArray(options))
			options.forEach(function (r) {
				opt += "<div class='ei-option' data-value='" + r + "' tabindex='0'>" + r + "</div>";
			});
		else
			for (var o in options)
				if (options.hasOwnProperty(o))
					opt += "<div class='ei-option' data-value='" + options[o] + "' tabindex='0'>" + o + "</div>";

		$('#ei-container-' + id).find('.ei-options').html("<div class='ei-option ei-disabled ei-sentinel'>Start typing to see suggestions...</div>" + (opt ? opt : '')).eiPositionWidget();
	},

	filterAutoCompleteOptions: function (input, query) {
		var id = ~~(~~input ? input : (input instanceof jQuery ? input.attr('data-ei-bound-to') : $(input).attr('data-ei-bound-to')));
		if (!id)
			throw "Input param must be an EI id, jQuery object or a selector.";

		var words = query.toLowerCase().split(' ');

		if (query) {
			$('#ei-container-' + id).find('.ei-options').find('.ei-option').hide().filter(function () {
				var o = $(this).text().toLowerCase();
				return words.some(function (v) {
					return v && o.indexOf(v) !== -1;
				});
			}).show();
			$('#ei-container-' + id).find('.ei-options').find('.ei-sentinel').hide();
		} else
			$('#ei-container-' + id).find('.ei-options').find('.ei-option').hide().end().find('.ei-sentinel').show();
	},
};

$(function () {

	var e = $('.ei');
	e.length && e.ei();

	var c = $('.ei-c');
	c.length && c.find('input').ei();

});

$.fn.ei = function (p) {
	if (!p)
		p = {};
	if (ei._track.outdated && ei._cfg.outdatedNative)
		return this;
	if (this.length && !ei._track.bindings)
		ei._bindings();

	return this.each(function () {
		ei.init(this, p);
	});
};

$.fn.eiPositionWidget = function () {
	return this.each(function () {
		ei.positionWidget($(this));
	});
};
/* EasyInput 1.5.12 */

if (typeof ei === 'undefined')
	throw new Error("EasyInput: EI Date has been referenced before EI Core");

ei.date = {

	_months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
	_days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],

	_track: {
		fields: {

		},
	},

	// Pickers that each format attribute should use (Y, M, D, HRS, MINS)
	_formatPickers: {
		a: [0, 0, 0, 1, 0],
		A: [0, 0, 0, 1, 0],
		B: [0, 0, 0, 1, 1],
		c: [1, 1, 1, 1, 1],
		d: [0, 0, 1, 0, 0],
		D: [0, 0, 1, 0, 0],
		F: [0, 1, 0, 0, 0],
		g: [0, 0, 0, 1, 0],
		G: [0, 0, 0, 1, 0],
		h: [0, 0, 0, 1, 0],
		H: [0, 0, 0, 1, 0],
		i: [0, 0, 0, 0, 1],
		j: [0, 0, 1, 0, 0],
		l: [0, 0, 1, 0, 0],
		m: [0, 1, 0, 0, 0],
		M: [0, 1, 0, 0, 0],
		n: [0, 1, 0, 0, 0],
		N: [0, 0, 1, 0, 0],
		r: [1, 1, 1, 1, 1],
		S: [0, 0, 1, 0, 0],
		t: [0, 0, 1, 0, 0],
		w: [0, 0, 1, 0, 0],
		W: [0, 0, 1, 0, 0],
		y: [1, 0, 0, 0, 0],
		Y: [1, 0, 0, 0, 0],
		z: [0, 0, 1, 0, 0],
	},

	_formats: {
		a: function (d) {
			return d.getHours() < 12 ? 'am' : 'pm';
		},
		A: function (d) {
			return ei.date._formats.a(d).toUpperCase();
		},
		B: function (d) {
			return ('000' + Math.floor((d.getHours() * 60 * 60 + (d.getMinutes() + 60 + d.getTimezoneOffset()) * 60 + d.getSeconds()) / 86.4) % 1000).slice(-3);
		},
		c: function (d) {
			return ei.date.format(d, 'Y-m-d\\TH:i:s');
		},
		d: function (d) {
			return (d.getDate() < 10 ? '0' : '') + d.getDate();
		},
		D: function (d) {
			return ei.date._days[d.getDay()].substr(0, 3);
		},
		e: function (d) {
			var first = parseInt(Math.abs(d.getTimezoneOffset() / 60), 10),
				second = Math.abs(d.getTimezoneOffset() % 60);
			return (new Date().getTimezoneOffset() < 0 ? '+' : '-') + (first < 10 ? '0' : '') + first + (second < 10 ? '0' : '') + second;
		},
		F: function (d) {
			return ei.date._months[d.getMonth()];
		},
		g: function (d) {
			return d.getHours() > 12 ? d.getHours() - 12 : d.getHours();
		},
		G: function (d) {
			return d.getHours();
		},
		h: function (d) {
			var hour = d.getHours() > 12 ? d.getHours() - 12 : d.getHours();
			return (hour < 10 ? '0' : '') + hour;
		},
		H: function (d) {
			return (d.getHours() < 10 ? '0' : '') + d.getHours();
		},
		i: function (d) {
			return (d.getMinutes() < 10 ? '0' : '') + d.getMinutes();
		},
		I: function (d) {
			return d.getTimezoneOffset() < Math.max(new Date(d.getFullYear(), 0, 1).getTimezoneOffset(), new Date(d.getFullYear(), 6, 1).getTimezoneOffset()) ? 1 : 0;
		},
		j: function (d) {
			return d.getDate();
		},
		l: function (d) {
			return ei.date._days[d.getDay()];
		},
		L: function (d) {
			return new Date(d.getFullYear(), 1, 29).getMonth() === 1 ? 1 : 0;
		},
		m: function (d) {
			return (d.getMonth() + 1 < 10 ? '0' : '') + (d.getMonth() + 1);
		},
		M: function (d) {
			return ei.date._months[d.getMonth()].substr(0, 3);
		},
		n: function (d) {
			return d.getMonth() + 1;
		},
		N: function (d) {
			return d.getDay() === 0 ? 7 : d.getDay();
		},
		o: function (d) {
			var target = new Date(d.valueOf());
			target.setDate(target.getDate() - ((d.getDay() + 6) % 7) + 3);
			return target.getFullYear();
		},
		O: function (d) {
			var first = parseInt(Math.abs(d.getTimezoneOffset() / 60), 10),
				second = Math.abs(d.getTimezoneOffset() % 60);
			return (new Date().getTimezoneOffset() < 0 ? '+' : '-') + (first < 10 ? '0' : '') + first + (second < 10 ? '0' : '') + second;
		},
		P: function (d) {
			var first = parseInt(Math.abs(d.getTimezoneOffset() / 60), 10),
				second = Math.abs(d.getTimezoneOffset() % 60);
			return (new Date().getTimezoneOffset() < 0 ? '+' : '-') + (first < 10 ? '0' : '') + first + ':' + (second < 10 ? '0' : '') + second;
		},
		r: function (d) {
			return ei.date.format(d, 'D, d M Y H:i:s O');
		},
		s: function (d) {
			return (d.getSeconds() < 10 ? '0' : '') + d.getSeconds();
		},
		S: function (d) {
			switch (d.getDate()) {
				case 1:
				case 21:
				case 31:
					return 'st';
				case 2:
				case 22:
					return 'nd';
				case 3:
				case 23:
					return 'rd';
				default:
					return 'th';
			}
		},
		t: function (d) {
			return new Date(d.getFullYear(), d.getMonth() + 1, 0).getDate();
		},
		T: function (d) {
			var abbreviation = String(d).match(/\(([^\)]+)\)$/) || String(d).match(/([A-Z]+) [\d]{4}$/);
			if (abbreviation)
				abbreviation = abbreviation[1].match(/[A-Z]/g).join('');
			return abbreviation;
		},
		u: function (d) {
			return d.getMilliseconds() * 1000;
		},
		U: function (d) {
			return Math.round(d.getTime() / 1000);
		},
		w: function (d) {
			return d.getDay();
		},
		W: function (d) {
			var target = new Date(d.valueOf());
			var dayNr = (d.getDay() + 6) % 7;
			target.setDate(target.getDate() - dayNr + 3);
			var firstThursday = target.valueOf();
			target.setMonth(0, 1);
			if (target.getDay() !== 4)
				target.setMonth(0, 1 + ((4 - target.getDay()) + 7) % 7);
			return 1 + Math.ceil((firstThursday - target) / (1000 * 60 * 60 * 24 * 7));
		},
		y: function (d) {
			return String(d.getFullYear()).substring(2, 4);
		},
		Y: function (d) {
			return d.getFullYear();
		},
		z: function (d) {
			return Math.floor((d.getTime() - new Date(d.getFullYear(), 0, 1).getTime()) / (1000 * 60 * 60 * 24));
		},
		Z: function (d) {
			return (d.getTimezoneOffset() < 0 ? '+' : '-') + (d.getTimezoneOffset() * 24);
		}
	},

	// Get all days in the given month/year
	_calendarDays: function (fieldId) {
		var f = ei.date._track.fields[fieldId],
			t = new Date(),
			r = new Date(f.widgetYear, f.widgetMonth, 0),
			isMonthYearNow = f.widgetMonth === t.getMonth() && f.widgetYear === t.getFullYear(),
			s = "<div class='ei-top'><div class='ei-left-arrow'></div><div class='ei-current ei-current-month'>" + ei.date._months[f.widgetMonth] + " " + f.widgetYear + "</div><div class='ei-right-arrow'></div></div><div class='ei-day-headings'><div>Mo</div><div>Tu</div><div>We</div><div>Th</div><div>Fr</div><div>Sa</div><div style='margin-right:0;'>Su</div></div><div class='ei-days'>",
			pad = r.getDay(),
			selectedDate = f.selected != null ? f.selected.getFullYear() + '/' + f.selected.getMonth() + '/' + f.selected.getDate() : null,
			disabledRanges = f.disabledRanges.map(function (m) {
				var current = new Date(f.widgetYear, f.widgetMonth);
				return new Date(m[0].getFullYear(), m[0].getMonth()) <= current && new Date(m[1].getFullYear(), m[1].getMonth()) >= current ? m : null;
			}),
			i,
			thisDate = new Date(f.widgetYear, f.widgetMonth + 1, 0);

		for (i = 0; i < pad; i++) // Pad days up to first date
			s += "<div class='ei-date ei-pad'></div>";

		for (i = 0; i < new Date(f.widgetYear, f.widgetMonth + 1, 0).getDate(); i++) {
			thisDate.setDate(i + 1);

			var disabled = disabledRanges.some(function (m) {
				return m && thisDate >= m[0] && thisDate <= m[1];
			});

			s += "<div class='ei-date" + (isMonthYearNow && thisDate.getDate() === t.getDate() ? " ei-today" : "") + (selectedDate != null && thisDate.getFullYear() + '/' + thisDate.getMonth() + '/' + thisDate.getDate() === selectedDate ? " ei-selected" : "") + (disabled ? ' ei-disabled' : '') + "'" + (((i + pad) + 1) % 7 === 0 ? " style='margin-right:0;'" : '') + " data-ei-pickable>" + (i + 1) + "</div>";
		}

		return s + "</div>";
	},

	// Get all months in the given year
	_calendarMonths: function (fieldId) {
		var f = ei.date._track.fields[fieldId],
			s = "<div class='ei-top'><div class='ei-left-arrow'></div><div class='ei-current ei-current-year'>" + f.widgetYear + "</div><div class='ei-right-arrow'></div></div><div class='ei-days'>";

		for (var i = 0; i < ei.date._months.length; i++)
			s += "<div class='ei-month" + (f.selected != null && f.selected.getFullYear() === f.widgetYear && f.selected.getMonth() === i ? (f.widgetPickers[2] ? ' ei-partial-selected' : ' ei-selected') : '') + "'" + ((i + 1) % 4 === 0 ? " style='margin-right:0;'" : '') + " data-month='" + i + "'>" + ei.date._months[i].substr(0, 3) + "</div>";

		return s + "</div>";
	},

	// Get a few years either side of the given year
	_calendarYears: function (fieldId) {
		var f = ei.date._track.fields[fieldId],
			l = f.widgetEra - 6,
			h = f.widgetEra + 5,
			s = "<div class='ei-top'><div class='ei-left-arrow'></div><div class='ei-current ei-current-era'>" + l + " - " + h + "</div><div class='ei-right-arrow'></div></div><div class='ei-days'>";

		for (var i = l; i <= h; i++)
			s += "<div class='ei-year" + (f.selected != null && f.selected.getFullYear() === i ? (f.widgetPickers[1] ? ' ei-partial-selected' : ' ei-selected') : '') + "'" + (((i - l) + 1) % 4 === 0 ? " style='margin-right:0;'" : '') + " data-year='" + i + "'>" + i + "</div>";

		return s + "</div>";
	},

	// Get all hours for the clock
	_clockHours: function (container, selected) {
		var r = container.find('.ei-widget.ei-clock').find('.ei-analogue-clock').outerWidth() / 2,
			s = "<div class='ei-key'>Hrs</div>",
			d = "<select class='ei-time-select' data-ei-select='hour'>";

		for (var min = 1; min <= 24; min++) {
			var str = min === 24 ? '00' : min,
				rad = min < 13 ? r - 40 : r - 16,
				x = Math.floor(rad * Math.sin(Math.PI * 2 * (min / 12))),
				y = Math.floor(rad * Math.cos(Math.PI * 2 * (min / 12))),
				isSelected = selected != null && selected instanceof Date && selected.getHours() === (min === 24 ? 0 : min);

			s += "<div class='ei-time ei-hour" + (isSelected ? ' ei-selected' : '') + "' data-ei-value='" + str + "' style='margin-left:" + (x + r) + "px;margin-top:" + (-y + r) + "px;'>" + str + "</div>";
			d += "<option value='" + min + "'" + (isSelected ? " selected='selected'" : '') + ">" + (min < 10 ? '0' : '') + str + "</option>";
		}

		return s + d + "</select>";
	},

	// Get all minutes for the clock
	_clockMinutes: function (container, selected) {
		var r = container.find('.ei-widget.ei-clock').find('.ei-analogue-clock').outerWidth() / 2,
			s = "<div class='ei-key'>Mins</div>",
			d = "<select class='ei-time-select' data-ei-select='minute'>";

		for (var min = 0; min < 60; min++) {
			var isSelected = selected != null && selected instanceof Date && selected.getMinutes() === min;
			if (!(min % 5)) {
				var str = min === 0 ? '00' : min,
					rad = r - 24,
					x = rad * Math.sin(Math.PI * 2 * (min / 60)),
					y = rad * Math.cos(Math.PI * 2 * (min / 60));

				s += "<div class='ei-time ei-minute" + (isSelected ? ' ei-selected' : '') + "' data-ei-value='" + str + "' style='margin-left:" + (x + r) + "px;margin-top:" + (-y + r) + "px;'>" + str + "</div>";
			}
			d += "<option value='" + min + "'" + (isSelected ? " selected='selected'" : '') + ">" + (min < 10 ? '0' : '') + min + "</option>";
		}

		return s + d + "</select>";
	},

	_bindings: function () {
		// Clicked the control
		$('body').on('click tap', '.ei-input.ei-date, .ei-date-text-print', function () {
			var id = ~~$(this).attr('data-ei-id'),
				container = $(this).parents('.ei-container');

			$('.ei-widget').hide();

			// clock
			if (!ei.date._track.fields[id].widgetPickers[0] && !ei.date._track.fields[id].widgetPickers[1] && !ei.date._track.fields[id].widgetPickers[2] && (ei.date._track.fields[id].widgetPickers[3] || ei.date._track.fields[id].widgetPickers[4])) {
				var clock = $(this).parents('.ei-container').find('.ei-widget.ei-clock');
				clock.find('.ei-analogue-clock').html(ei.date._track.fields[id].widgetPickers[3] ? ei.date._clockHours(container, ei.date._track.fields[id].selected) : ei.date._clockMinutes(container, ei.date._track.fields[id].selected));
				if (localStorage.eiDateTimePreferDropdowns === 'true')
					clock.addClass('ei-time-dropdowns');
				clock.toggle().eiPositionWidget();
			}
			// calendar
			else
				$(this).parents('.ei-container').find('.ei-calendar').toggle().eiPositionWidget();
		})
			// Picked a date
			.on('click tap', '.ei-calendar .ei-date[data-ei-pickable]', function () {
				var p = $(this).parents('.ei-container'),
					id = ~~p.attr('data-ei-id'),
					y = ei.date._track.fields[id].widgetYear,
					m = ei.date._track.fields[id].widgetMonth;

				if ($(this).hasClass('ei-disabled'))
					return false;

				if (ei.date._track.fields[id].selected == null)
					ei.date._track.fields[id].selected = new Date(1970, 0, 1, 0, 0, 0, 0);

				ei.date._track.fields[id].selected.setFullYear(y);
				ei.date._track.fields[id].selected.setMonth(m);
				ei.date._track.fields[id].selected.setDate(Number($(this).text().trim()));

				$(this).addClass('ei-selected');
				$(this).siblings('.ei-date').removeClass('ei-selected');

				ei.date.set(id, ei.date._track.fields[id].selected);

				if (ei.date._track.fields[id].widgetPickers[3] === 1) { // hours
					p.find('.ei-widget.ei-clock').find('.ei-analogue-clock').html(ei.date._clockHours(p, ei.date._track.fields[id].selected)).end().show();
					if (localStorage.eiDateTimePreferDropdowns === 'true')
						p.find('.ei-widget.ei-clock').addClass('ei-time-dropdowns');
				} else if (ei.date._track.fields[id].widgetPickers[4] === 1) { // mins
					p.find('.ei-widget.ei-clock').find('.ei-analogue-clock').html(ei.date._clockMinutes(p, ei.date._track.fields[id].selected)).end().show();
					if (localStorage.eiDateTimePreferDropdowns === 'true')
						p.find('.ei-widget.ei-clock').addClass('ei-time-dropdowns');
				}
			})
			// picked an hour
			.on('click tap', '.ei-clock .ei-time.ei-hour', function () {
				var p = $(this).parents('.ei-container'),
					id = ~~p.attr('data-ei-id');

				if (ei.date._track.fields[id].selected == null)
					ei.date._track.fields[id].selected = new Date(1970, 0, 1, 0, 0, 0, 0);

				ei.date._track.fields[id].selected.setHours(~~$(this).text());
				ei.date.set(id, ei.date._track.fields[id].selected);

				if (ei.date._track.fields[id].widgetPickers[4] === 1) // mins
					p.find('.ei-widget.ei-clock').find('.ei-analogue-clock').html(ei.date._clockMinutes(p, ei.date._track.fields[id].selected)).end().show();
			})
			// picked a minute
			.on('click tap', '.ei-clock .ei-time.ei-minute', function () {
				var p = $(this).parents('.ei-container'),
					id = ~~p.attr('data-ei-id');

				if (ei.date._track.fields[id].selected == null)
					ei.date._track.fields[id].selected = new Date(1970, 0, 1, 0, 0, 0, 0);

				ei.date._track.fields[id].selected.setMinutes(~~$(this).text());
				ei.date.set(id, ei.date._track.fields[id].selected);
			})
			// toggled clock dropdowns
			.on('click tap', '.ei-clock .ei-toggle-clock', function () {
				var p = $(this).parents('.ei-widget'),
					isAlreadyDropdowns = p.hasClass('ei-time-dropdowns');
				localStorage.eiDateTimePreferDropdowns = !isAlreadyDropdowns;
				p.toggleClass('ei-time-dropdowns');
			})
			// picked an hour/minute through dropdowns
			.on('change', '.ei-clock .ei-time-select', function () {
				var p = $(this).parents('.ei-container'),
					id = ~~p.attr('data-ei-id'),
					setting = $(this).attr('data-ei-select');

				if (setting === 'hour')
					ei.date._track.fields[id].selected.setHours(~~$(this).val());
				else
					ei.date._track.fields[id].selected.setMinutes(~~$(this).val());

				ei.date.set(id, ei.date._track.fields[id].selected);

				if (setting === 'hour' && ei.date._track.fields[id].widgetPickers[4] === 1) // mins
					p.find('.ei-widget.ei-clock').find('.ei-analogue-clock').html(ei.date._clockMinutes(p, ei.date._track.fields[id].selected)).end().show();
			})
			// Navigate months/years
			.on('click tap', '.ei-calendar .ei-left-arrow, .ei-calendar .ei-right-arrow', function () {
				var p = $(this).parents('.ei-calendar'),
					c = p.parents('.ei-container'),
					id = c.attr('data-ei-id'),
					y = ei.date._track.fields[id].widgetYear,
					m = ei.date._track.fields[id].widgetMonth,
					e = ei.date._track.fields[id].widgetEra,
					r = $(this).hasClass('ei-right-arrow'),
					t = $(this);
				setTimeout(function () {
					// Next month/year
					if (r) {
						if (p.find('.ei-current').hasClass('ei-current-era')) {
							ei.date._track.fields[id].widgetEra = e + 12;
							p.html(ei.date._calendarYears(id));
						} else if (p.find('.ei-current').hasClass('ei-current-month')) {
							ei.date._track.fields[id].widgetMonth = m >= 11 ? 0 : m + 1;
							ei.date._track.fields[id].widgetYear = m >= 11 ? y + 1 : y;
							p.html(ei.date._calendarDays(id));
						} else {
							ei.date._track.fields[id].widgetYear = y + 1;
							p.html(ei.date._calendarMonths(id));
						}
					}
					// Previous month/year
					else {
						if (p.find('.ei-current').hasClass('ei-current-era')) {
							ei.date._track.fields[id].widgetEra = e - 12;
							p.html(ei.date._calendarYears(id));
						} else if (p.find('.ei-current').hasClass('ei-current-month')) {
							ei.date._track.fields[id].widgetMonth = m <= 0 ? 11 : m - 1;
							ei.date._track.fields[id].widgetYear = m <= 0 ? y - 1 : y;
							p.html(ei.date._calendarDays(id));
						} else {
							ei.date._track.fields[id].widgetYear = y - 1;
							p.html(ei.date._calendarMonths(id));
						}
					}
					ei.positionWidget(p);
				}, 50);
			})
			// Jump up a level (days/months/years)
			.on('click tap', '.ei-calendar .ei-current', function () {
				var e = $(this),
					t = $(this).parents('.ei-calendar'),
					c = t.parents('.ei-container'),
					id = c.attr('data-ei-id'),
					y = ei.date._track.fields[id].widgetYear,
					m = ei.date._track.fields[id].widgetMonth,
					pk = ei.date._track.fields[id].widgetPickers,
					selecting = e.hasClass('ei-current-era') ? 0 : (e.hasClass('ei-current-year') ? 1 : 2);
				setTimeout(function () {
					var next = selecting - 1 < 0 ? 2 : (selecting - 1);
					for (var i = 0; i < 3; i++)
						if (ei.date._track.fields[id].widgetPickers[next] !== 1)
							next = next - 1 < 0 ? 2 : (next - 1);
						else
							break;

					t.html(next === 0 ? ei.date._calendarYears(id) : (next === 1 ? ei.date._calendarMonths(id) : next === 2 ? ei.date._calendarDays(id) : "Malformed Format"));
					ei.positionWidget(t); ei.positionWidget(t);
				}, 50);
			})
			// Picked a month
			.on('click tap', '.ei-calendar .ei-month', function () {
				var t = $(this).parents('.ei-calendar'),
					c = t.parents('.ei-container'),
					id = Number(c.attr('data-ei-id')),
					y = ei.date._track.fields[id].widgetYear,
					e = $(this);
				ei.date._track.fields[id].widgetMonth = Number(e.attr('data-month'));
				if (ei.date._track.fields[id].widgetPickers[2] === 0) {
					$(this).addClass('ei-selected');
					$(this).siblings('.ei-month').removeClass('ei-selected');
					var selected = new Date(y, ei.date._track.fields[id].widgetMonth, 1);
					ei.date.set(id, selected);
				} else {
					setTimeout(function () {
						t.html(ei.date._calendarDays(id));
						ei.positionWidget(t);
					}, 50);
				}
			})
			// Picked a year
			.on('click tap', '.ei-calendar .ei-year', function () {
				var t = $(this).parents('.ei-calendar'),
					c = t.parents('.ei-container'),
					id = Number(c.attr('data-ei-id')),
					e = $(this);
				ei.date._track.fields[id].widgetYear = Number(e.attr('data-year'));
				if (ei.date._track.fields[id].widgetPickers[1] === 0) {
					$(this).addClass('ei-selected');
					$(this).siblings('.ei-year').removeClass('ei-selected');
					var selected = new Date(ei.date._track.fields[id].widgetYear, 0, 1);
					ei.date.set(id, selected);
				} else {
					setTimeout(function () {
						t.html(ei.date._calendarMonths(id));
						ei.positionWidget(t);
					}, 50);
				}
			});
	},

	// Flatten `_formatPickers` arrays into one
	_flatten: function (arrays) {
		var flat = [0, 0, 0, 0, 0];

		for (var i = 0; i < arrays.length; i++) {
			if (arrays[i][0] === 1)
				flat[0] = 1;
			if (arrays[i][1] === 1)
				flat[1] = 1;
			if (arrays[i][2] === 1)
				flat[2] = 1;
			if (arrays[i][3] === 1)
				flat[3] = 1;
			if (arrays[i][4] === 1)
				flat[4] = 1;
		}

		return flat;
	},

	// Extract the attributes from the pattern
	_expandPattern: function (pattern) {
		var attributes = [],
			escaped = false;

		for (var i = 0; i < pattern.length; i++)
			if (!escaped && pattern.substring(i, i + 1) === '\\')
				escaped = true;
			else if (escaped || typeof ei.date._formats[pattern.substring(i, i + 1)] === 'undefined')
				escaped = false;
			else
				attributes.push(pattern.substring(i, i + 1));

		return attributes;
	},

	// Init EI Date on an input
	_init: function (input, container, params) {
		var field = input.get(0),
			t = {};

		t.selected = typeof params.selected !== 'undefined' ? ei.date.parse(params.selected) : (typeof input.attr('data-ei-selected') !== 'undefined' ? ei.date.parse(input.attr('data-ei-selected')) : (field.value.length ? ei.date.parse(field.value) : null));
		t.initial = t.selected ? t.selected : new Date();
		t.format = typeof params.format !== 'undefined' ? params.format : (typeof input.attr('data-ei-format') !== 'undefined' ? input.attr('data-ei-format') : 'Y/m/d');
		t.printFormat = typeof params.printFormat !== 'undefined' ? params.printFormat : (typeof input.attr('data-ei-print-format') !== 'undefined' ? input.attr('data-ei-print-format') : (typeof input.attr('data-ei-format') !== 'undefined' ? input.attr('data-ei-format') : 'd/m/Y'));
		t.placeholder = typeof params.placeholder !== 'undefined' ? params.placeholder : (typeof input.attr('placeholder') !== 'undefined' ? input.attr('placeholder') : 'Select a date...');
		t.id = ei._track.ai;
		t.widgetMonth = t.initial.getMonth();
		t.widgetYear = t.initial.getFullYear();
		t.widgetEra = t.initial.getFullYear();
		t.disabledRanges = [];
		t.isPlainTextbox = typeof params.textbox !== 'undefined' ? params.textbox : (typeof input.attr('data-ei-textbox') !== 'undefined' ? input.attr('data-ei-textbox') !== 'false' : true);

		var disabledRanges = typeof params.disabledRanges !== 'undefined' ? params.disabledRanges : (typeof input.attr('data-ei-disabled-ranges') !== 'undefined' ? input.attr('data-ei-disabled-ranges') : null);
		disabledRanges && disabledRanges.split(';').forEach(function (range) {
			var r = range.split('~'),
				from = r[0].length ? ei.date.parse(r[0]) : new Date(1900, 0),
				to = range.indexOf('~') !== -1 ? (r[1].length ? ei.date.parse(r[1]) : new Date(9999, 0)) : from;
			t.disabledRanges.push([from, to]);
		});

		// Determine which pickers to use (year, month + date)
		var flatten = [],
			expanded = ei.date._expandPattern(t.printFormat);

		for (var i = 0; i < expanded.length; i++)
			if (typeof ei.date._formatPickers[expanded[i]] !== 'undefined')
				flatten.push(ei.date._formatPickers[expanded[i]]);

		t.widgetPickers = ei.date._flatten(flatten);

		// Final DOM manipulation
		ei.date._track.fields[t.id] = t;

		if (t.isPlainTextbox) {
			var classes = field.className.split(' ').filter(function (c) {
				return c.lastIndexOf('ei', 0) !== 0;
			}).join(' ').trim();
			container.prepend("<input type='text' class='ei-date-text-print" + (classes ? ' ' + classes : '') + "' tabindex='0' data-ei-id='" + t.id + "' value='" + (t.selected ? ei.date.format(t.selected, t.printFormat) : t.placeholder) + "' readonly='readonly' " + (input.attr('style') ? " style='" + input.attr('style') + "'" : "") + " /><span class='ei-date-icon' aria-hidden='true'></span>");
		} else
			container.prepend("<div class='ei-input ei-date ei-block' id='ei-input-" + ei._track.ai + "' tabindex='0' data-ei-id='" + ei._track.ai + "' data-ei-bound-to='" + (field.id || '') + "'" + (input.attr('style') ? " style='" + input.attr('style') + "'" : "") + "><div class='ei-name'>" + (t.selected ? ei.date.format(t.selected, t.printFormat) : t.placeholder) + "</div></div>");

		container.append("<div class='ei-calendar ei-widget'>" + (t.widgetPickers[2] === 1 ? ei.date._calendarDays(t.id) : (t.widgetPickers[1] === 1 ? ei.date._calendarMonths(t.id) : (t.widgetPickers[0] === 1 ? ei.date._calendarYears(t.id) : 'Malformed Format'))) + "</div>");

		if (t.widgetPickers[3] === 1 || t.widgetPickers[4] === 1) {
			container.append("<div class='ei-clock ei-widget'><div class='ei-toggle-clock'></div><div class='ei-analogue-clock'></div></div>");
			// only have time pickers
			if (!t.widgetPickers[0] && !t.widgetPickers[1] && !t.widgetPickers[2]) {
				if (t.isPlainTextbox)
					container.find('.ei-date-icon').addClass('ei-time');
				else
					container.find('.ei-input').addClass('ei-time');
			}
		}

		input.val(t.selected ? ei.date.format(t.selected, t.format) : '');

		ei._cfg.debug && console.log("EasyInput: [Date] Init [date=" + t.selected + "]", input);
	},

	// Formats a date object to a pretty string (see docs)
	format: function (date, pattern) {
		var string = '',
			escaped = false,
			parsed = [];

		if (!(date instanceof Date))
			date = new Date(date);

		for (var i = 0; i < pattern.length; i++) {
			if (!escaped && pattern.substring(i, i + 1) === '\\')
				escaped = true;
			else if (escaped || typeof ei.date._formats[pattern.substring(i, i + 1)] === 'undefined') {
				string += String(pattern.substring(i, i + 1));
				escaped = false;
			} else {
				var segment = pattern.substring(i, i + 1);
				string += String(ei.date._formats[segment](date));
				parsed.push(segment);
			}
		}

		ei._cfg.debug && console.log("EasyInput: [Date] Format [date=" + date + ", pattern=" + pattern + "] = " + string);
		ei._cfg.debug && console.log("EasyInput: [Date] Pattern segments interpreted as [" + parsed.join(',') + "]");

		return string;
	},

	parse: function (string) {
		var d = null,
			attempt = string.trim().match(/^(?:|([0-9]{1,4}?)(?:\/|-)([0-9]{1,2}?)(?:\/|-)([0-9]{1,4}))(?:|(?:| )([0-9]{2}):([0-9]{2})(?:|:([0-9]{2}))?)$/);

		if (attempt != null)
			d = new Date(typeof attempt[3] === 'undefined' ? 0 : (attempt[3].length === 4 ? attempt[3] : attempt[1]), typeof attempt[2] === 'undefined' ? 0 : (attempt[2] - 1), typeof attempt[3] === 'undefined' ? 0 : (attempt[3].length === 4 ? attempt[1] : attempt[3]), attempt[4] || 0, attempt[5] || 0, attempt[6] || 0);

		if (!d || isNaN(d.getTime())) {
			console.log("EasyInput: [Date] Couldn't parse date [string=" + string + "].  See docs for supported input formats.");
			return null;
		}

		return d;
	},

	set: function (id, date) {
		if (typeof id !== 'number' || typeof date !== 'object')
			throw "You must supply a numeric id (e.g. value of [data-ei-id]) and a valid date object (not a string)";

		var c = $('#ei-container-' + id);
		c.find('.ei-hidden').find('input').val(ei.date.format(date, ei.date._track.fields[id].format)).trigger('change');

		if (ei.date._track.fields[id].isPlainTextbox)
			c.find('.ei-date-text-print').val(ei.date.format(date, ei.date._track.fields[id].printFormat));
		else
			c.find('.ei-input').find('.ei-name').html(ei.date.format(date, ei.date._track.fields[id].printFormat));

		c.find('.ei-widget').hide();
		ei._track.focus = null;
	},

};

ei.registerHandler('date', 'date');